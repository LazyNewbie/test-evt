// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.30.2
// source: proto_files/adevent.proto

package adevent

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdEventType int32

const (
	AdEventType_Unspecified AdEventType = 0
	AdEventType_Impression  AdEventType = 1
	AdEventType_Click       AdEventType = 2
	AdEventType_Goal        AdEventType = 3
	AdEventType_VideoView   AdEventType = 4
	AdEventType_VideoHit    AdEventType = 5
	AdEventType_Rtb         AdEventType = 6
	AdEventType_Wpn         AdEventType = 7
	AdEventType_AdRequest   AdEventType = 8
)

// Enum value maps for AdEventType.
var (
	AdEventType_name = map[int32]string{
		0: "Unspecified",
		1: "Impression",
		2: "Click",
		3: "Goal",
		4: "VideoView",
		5: "VideoHit",
		6: "Rtb",
		7: "Wpn",
		8: "AdRequest",
	}
	AdEventType_value = map[string]int32{
		"Unspecified": 0,
		"Impression":  1,
		"Click":       2,
		"Goal":        3,
		"VideoView":   4,
		"VideoHit":    5,
		"Rtb":         6,
		"Wpn":         7,
		"AdRequest":   8,
	}
)

func (x AdEventType) Enum() *AdEventType {
	p := new(AdEventType)
	*p = x
	return p
}

func (x AdEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_files_adevent_proto_enumTypes[0].Descriptor()
}

func (AdEventType) Type() protoreflect.EnumType {
	return &file_proto_files_adevent_proto_enumTypes[0]
}

func (x AdEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdEventType.Descriptor instead.
func (AdEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_files_adevent_proto_rawDescGZIP(), []int{0}
}

type AdEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateInt                     int64   `protobuf:"varint,1,opt,name=date_int,json=dateInt,proto3" json:"date_int,omitempty"`
	Time                        uint64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Country                     string  `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Idlanguage                  int32   `protobuf:"varint,4,opt,name=idlanguage,proto3" json:"idlanguage,omitempty"`
	SiteHostname                string  `protobuf:"bytes,5,opt,name=site_hostname,json=siteHostname,proto3" json:"site_hostname,omitempty"`
	Idadvertiser                int32   `protobuf:"varint,6,opt,name=idadvertiser,proto3" json:"idadvertiser,omitempty"`
	Idpublisher                 int32   `protobuf:"varint,7,opt,name=idpublisher,proto3" json:"idpublisher,omitempty"`
	Idsite                      int32   `protobuf:"varint,8,opt,name=idsite,proto3" json:"idsite,omitempty"`
	Idzone                      int32   `protobuf:"varint,9,opt,name=idzone,proto3" json:"idzone,omitempty"`
	Idcategory                  int32   `protobuf:"varint,10,opt,name=idcategory,proto3" json:"idcategory,omitempty"`
	Idcampaign                  int32   `protobuf:"varint,11,opt,name=idcampaign,proto3" json:"idcampaign,omitempty"`
	Idvariation                 int32   `protobuf:"varint,12,opt,name=idvariation,proto3" json:"idvariation,omitempty"`
	Idos                        int32   `protobuf:"varint,13,opt,name=idos,proto3" json:"idos,omitempty"`
	Idbrowser                   int32   `protobuf:"varint,14,opt,name=idbrowser,proto3" json:"idbrowser,omitempty"`
	Iddevice                    int32   `protobuf:"varint,15,opt,name=iddevice,proto3" json:"iddevice,omitempty"`
	Idcarrier                   int32   `protobuf:"varint,16,opt,name=idcarrier,proto3" json:"idcarrier,omitempty"`
	Idisp                       int32   `protobuf:"varint,17,opt,name=idisp,proto3" json:"idisp,omitempty"`
	Sub                         int32   `protobuf:"varint,18,opt,name=sub,proto3" json:"sub,omitempty"`
	Value                       float32 `protobuf:"fixed32,19,opt,name=value,proto3" json:"value,omitempty"`
	PublisherRate               int32   `protobuf:"varint,20,opt,name=publisher_rate,json=publisherRate,proto3" json:"publisher_rate,omitempty"`
	PublisherCurrency           string  `protobuf:"bytes,21,opt,name=publisher_currency,json=publisherCurrency,proto3" json:"publisher_currency,omitempty"`
	CampaignCurrency            string  `protobuf:"bytes,22,opt,name=campaign_currency,json=campaignCurrency,proto3" json:"campaign_currency,omitempty"`
	ExchangeToPublisher         float32 `protobuf:"fixed32,23,opt,name=exchange_to_publisher,json=exchangeToPublisher,proto3" json:"exchange_to_publisher,omitempty"`
	ExchangeToNetwork           float32 `protobuf:"fixed32,24,opt,name=exchange_to_network,json=exchangeToNetwork,proto3" json:"exchange_to_network,omitempty"`
	AdType                      int32   `protobuf:"varint,25,opt,name=ad_type,json=adType,proto3" json:"ad_type,omitempty"`
	Format                      string  `protobuf:"bytes,26,opt,name=format,proto3" json:"format,omitempty"`
	Idnetwork                   int32   `protobuf:"varint,27,opt,name=idnetwork,proto3" json:"idnetwork,omitempty"`
	ImpressionStatus            int32   `protobuf:"varint,28,opt,name=impression_status,json=impressionStatus,proto3" json:"impression_status,omitempty"`
	ImpressionInvalidReason     int32   `protobuf:"varint,29,opt,name=impression_invalid_reason,json=impressionInvalidReason,proto3" json:"impression_invalid_reason,omitempty"`
	Adblock                     int32   `protobuf:"varint,30,opt,name=adblock,proto3" json:"adblock,omitempty"`
	Idoffer                     int32   `protobuf:"varint,31,opt,name=idoffer,proto3" json:"idoffer,omitempty"`
	IdlandingPage               int32   `protobuf:"varint,32,opt,name=idlanding_page,json=idlandingPage,proto3" json:"idlanding_page,omitempty"`
	Position                    int32   `protobuf:"varint,33,opt,name=position,proto3" json:"position,omitempty"`
	RegionGeonameId             int32   `protobuf:"varint,34,opt,name=region_geoname_id,json=regionGeonameId,proto3" json:"region_geoname_id,omitempty"`
	Idpartner                   int32   `protobuf:"varint,35,opt,name=idpartner,proto3" json:"idpartner,omitempty"`
	ClickStatus                 int32   `protobuf:"varint,36,opt,name=click_status,json=clickStatus,proto3" json:"click_status,omitempty"`
	ClickInvalidReason          string  `protobuf:"bytes,37,opt,name=click_invalid_reason,json=clickInvalidReason,proto3" json:"click_invalid_reason,omitempty"`
	ClickAllInvalidReasons      int32   `protobuf:"varint,38,opt,name=click_all_invalid_reasons,json=clickAllInvalidReasons,proto3" json:"click_all_invalid_reasons,omitempty"`
	Idgoal                      string  `protobuf:"bytes,39,opt,name=idgoal,proto3" json:"idgoal,omitempty"`
	RtbTotalTime                int32   `protobuf:"varint,40,opt,name=rtb_total_time,json=rtbTotalTime,proto3" json:"rtb_total_time,omitempty"`
	RtbContentSize              float32 `protobuf:"fixed32,41,opt,name=rtb_content_size,json=rtbContentSize,proto3" json:"rtb_content_size,omitempty"`
	BidStatus                   string  `protobuf:"bytes,42,opt,name=bid_status,json=bidStatus,proto3" json:"bid_status,omitempty"`
	ErrorReason                 string  `protobuf:"bytes,43,opt,name=error_reason,json=errorReason,proto3" json:"error_reason,omitempty"`
	RtbQueryStatus              bool    `protobuf:"varint,44,opt,name=rtb_query_status,json=rtbQueryStatus,proto3" json:"rtb_query_status,omitempty"`
	RtbValue                    float32 `protobuf:"fixed32,45,opt,name=rtb_value,json=rtbValue,proto3" json:"rtb_value,omitempty"`
	RtbRequestType              int32   `protobuf:"varint,46,opt,name=rtb_request_type,json=rtbRequestType,proto3" json:"rtb_request_type,omitempty"`
	EventType                   int32   `protobuf:"varint,47,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	UserIp                      string  `protobuf:"bytes,48,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`
	CountryOriginal             string  `protobuf:"bytes,49,opt,name=country_original,json=countryOriginal,proto3" json:"country_original,omitempty"`
	HttpXForwardedFor           string  `protobuf:"bytes,50,opt,name=http_x_forwarded_for,json=httpXForwardedFor,proto3" json:"http_x_forwarded_for,omitempty"`
	IdproductCategory           int32   `protobuf:"varint,51,opt,name=idproduct_category,json=idproductCategory,proto3" json:"idproduct_category,omitempty"`
	PricingModel                int32   `protobuf:"varint,52,opt,name=pricing_model,json=pricingModel,proto3" json:"pricing_model,omitempty"`
	Https                       int32   `protobuf:"varint,53,opt,name=https,proto3" json:"https,omitempty"`
	ScreenResolution            string  `protobuf:"bytes,54,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	UserId                      string  `protobuf:"bytes,55,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UrlHash                     string  `protobuf:"bytes,56,opt,name=url_hash,json=urlHash,proto3" json:"url_hash,omitempty"`
	RefererSiteHostname         string  `protobuf:"bytes,57,opt,name=referer_site_hostname,json=refererSiteHostname,proto3" json:"referer_site_hostname,omitempty"`
	ExecutionTime               float32 `protobuf:"fixed32,58,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	VideoEvent                  int32   `protobuf:"varint,59,opt,name=video_event,json=videoEvent,proto3" json:"video_event,omitempty"`
	Errorcode                   int32   `protobuf:"varint,60,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
	ImpId                       string  `protobuf:"bytes,61,opt,name=imp_id,json=impId,proto3" json:"imp_id,omitempty"`
	BidId                       string  `protobuf:"bytes,62,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	HttpCode                    int32   `protobuf:"varint,63,opt,name=http_code,json=httpCode,proto3" json:"http_code,omitempty"`
	IdcarrierSource             int32   `protobuf:"varint,64,opt,name=idcarrier_source,json=idcarrierSource,proto3" json:"idcarrier_source,omitempty"`
	Noscript                    int32   `protobuf:"varint,65,opt,name=noscript,proto3" json:"noscript,omitempty"`
	IncognitoMode               int32   `protobuf:"varint,66,opt,name=incognito_mode,json=incognitoMode,proto3" json:"incognito_mode,omitempty"`
	TestMode                    int32   `protobuf:"varint,67,opt,name=test_mode,json=testMode,proto3" json:"test_mode,omitempty"`
	CityGeonameId               int32   `protobuf:"varint,68,opt,name=city_geoname_id,json=cityGeonameId,proto3" json:"city_geoname_id,omitempty"`
	IsTrustedProxy              int32   `protobuf:"varint,69,opt,name=is_trusted_proxy,json=isTrustedProxy,proto3" json:"is_trusted_proxy,omitempty"`
	Iddatacenter                int32   `protobuf:"varint,70,opt,name=iddatacenter,proto3" json:"iddatacenter,omitempty"`
	AdblockVer                  string  `protobuf:"bytes,71,opt,name=adblock_ver,json=adblockVer,proto3" json:"adblock_ver,omitempty"`
	Clickx                      int32   `protobuf:"varint,72,opt,name=clickx,proto3" json:"clickx,omitempty"`
	Clicky                      int32   `protobuf:"varint,73,opt,name=clicky,proto3" json:"clicky,omitempty"`
	ContainerResolution         string  `protobuf:"bytes,74,opt,name=container_resolution,json=containerResolution,proto3" json:"container_resolution,omitempty"`
	ImpressionAllInvalidReasons int32   `protobuf:"varint,75,opt,name=impression_all_invalid_reasons,json=impressionAllInvalidReasons,proto3" json:"impression_all_invalid_reasons,omitempty"`
	NetacuityProxyDescription   string  `protobuf:"bytes,76,opt,name=netacuity_proxy_description,json=netacuityProxyDescription,proto3" json:"netacuity_proxy_description,omitempty"`
	NetacuityProxyType          string  `protobuf:"bytes,77,opt,name=netacuity_proxy_type,json=netacuityProxyType,proto3" json:"netacuity_proxy_type,omitempty"`
	EurToUsd                    float32 `protobuf:"fixed32,78,opt,name=eur_to_usd,json=eurToUsd,proto3" json:"eur_to_usd,omitempty"`
	WpnEvent                    int32   `protobuf:"varint,79,opt,name=wpn_event,json=wpnEvent,proto3" json:"wpn_event,omitempty"`
	EmailStatus                 int32   `protobuf:"varint,80,opt,name=email_status,json=emailStatus,proto3" json:"email_status,omitempty"`
	Sub2                        int32   `protobuf:"varint,81,opt,name=sub2,proto3" json:"sub2,omitempty"`
	Sub3                        int32   `protobuf:"varint,82,opt,name=sub3,proto3" json:"sub3,omitempty"`
	ScriptType                  string  `protobuf:"bytes,83,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	ScriptName                  string  `protobuf:"bytes,84,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	ScriptVer                   string  `protobuf:"bytes,85,opt,name=script_ver,json=scriptVer,proto3" json:"script_ver,omitempty"`
	BrowserVer                  int32   `protobuf:"varint,86,opt,name=browser_ver,json=browserVer,proto3" json:"browser_ver,omitempty"`
	Vr                          int32   `protobuf:"varint,87,opt,name=vr,proto3" json:"vr,omitempty"`
	Internal                    int32   `protobuf:"varint,88,opt,name=internal,proto3" json:"internal,omitempty"`
	Sampling                    int32   `protobuf:"varint,89,opt,name=sampling,proto3" json:"sampling,omitempty"`
	NoFunds                     int32   `protobuf:"varint,90,opt,name=no_funds,json=noFunds,proto3" json:"no_funds,omitempty"`
	IdresponsiveLayout          int32   `protobuf:"varint,91,opt,name=idresponsive_layout,json=idresponsiveLayout,proto3" json:"idresponsive_layout,omitempty"`
	Idmultizone                 int32   `protobuf:"varint,92,opt,name=idmultizone,proto3" json:"idmultizone,omitempty"`
	EmailIsp                    int32   `protobuf:"varint,93,opt,name=email_isp,json=emailIsp,proto3" json:"email_isp,omitempty"`
	ScriptDetail                int32   `protobuf:"varint,94,opt,name=script_detail,json=scriptDetail,proto3" json:"script_detail,omitempty"`
	ScriptVersion               int32   `protobuf:"varint,95,opt,name=script_version,json=scriptVersion,proto3" json:"script_version,omitempty"`
	ConversionValueEur          float32 `protobuf:"fixed32,96,opt,name=conversion_value_eur,json=conversionValueEur,proto3" json:"conversion_value_eur,omitempty"`
	ConversionValueUsd          float32 `protobuf:"fixed32,97,opt,name=conversion_value_usd,json=conversionValueUsd,proto3" json:"conversion_value_usd,omitempty"`
	IdadvertiserAdType          int32   `protobuf:"varint,98,opt,name=idadvertiser_ad_type,json=idadvertiserAdType,proto3" json:"idadvertiser_ad_type,omitempty"`
	Idproxy                     int32   `protobuf:"varint,99,opt,name=idproxy,proto3" json:"idproxy,omitempty"`
	AdRequestResult             int32   `protobuf:"varint,100,opt,name=ad_request_result,json=adRequestResult,proto3" json:"ad_request_result,omitempty"`
	IdnetworkType               int32   `protobuf:"varint,101,opt,name=idnetwork_type,json=idnetworkType,proto3" json:"idnetwork_type,omitempty"`
	RtbInventoryId              string  `protobuf:"bytes,102,opt,name=rtb_inventory_id,json=rtbInventoryId,proto3" json:"rtb_inventory_id,omitempty"`
	RtbInventoryName            string  `protobuf:"bytes,103,opt,name=rtb_inventory_name,json=rtbInventoryName,proto3" json:"rtb_inventory_name,omitempty"`
	IdcampaignType              int32   `protobuf:"varint,104,opt,name=idcampaign_type,json=idcampaignType,proto3" json:"idcampaign_type,omitempty"`
	RefreshIteration            int32   `protobuf:"varint,105,opt,name=refresh_iteration,json=refreshIteration,proto3" json:"refresh_iteration,omitempty"`
	KeyValue_1                  int32   `protobuf:"varint,106,opt,name=key_value_1,json=keyValue1,proto3" json:"key_value_1,omitempty"`
	KeyValue_2                  int32   `protobuf:"varint,107,opt,name=key_value_2,json=keyValue2,proto3" json:"key_value_2,omitempty"`
	KeyValue_3                  int32   `protobuf:"varint,108,opt,name=key_value_3,json=keyValue3,proto3" json:"key_value_3,omitempty"`
	KeyValue_4                  int32   `protobuf:"varint,109,opt,name=key_value_4,json=keyValue4,proto3" json:"key_value_4,omitempty"`
	KeyValue_5                  int32   `protobuf:"varint,110,opt,name=key_value_5,json=keyValue5,proto3" json:"key_value_5,omitempty"`
	KeyValue_6                  int32   `protobuf:"varint,111,opt,name=key_value_6,json=keyValue6,proto3" json:"key_value_6,omitempty"`
	KeyValue_7                  int32   `protobuf:"varint,112,opt,name=key_value_7,json=keyValue7,proto3" json:"key_value_7,omitempty"`
	KeyValue_8                  int32   `protobuf:"varint,113,opt,name=key_value_8,json=keyValue8,proto3" json:"key_value_8,omitempty"`
	KeyValue_9                  int32   `protobuf:"varint,114,opt,name=key_value_9,json=keyValue9,proto3" json:"key_value_9,omitempty"`
	KeyValue_10                 int32   `protobuf:"varint,115,opt,name=key_value_10,json=keyValue10,proto3" json:"key_value_10,omitempty"`
	CdnUsage                    int32   `protobuf:"varint,116,opt,name=cdn_usage,json=cdnUsage,proto3" json:"cdn_usage,omitempty"`
	BidShadingValue             float32 `protobuf:"fixed32,117,opt,name=bid_shading_value,json=bidShadingValue,proto3" json:"bid_shading_value,omitempty"`
	SecondBestValue             float32 `protobuf:"fixed32,118,opt,name=second_best_value,json=secondBestValue,proto3" json:"second_best_value,omitempty"`
	AuctionFloor                float32 `protobuf:"fixed32,119,opt,name=auction_floor,json=auctionFloor,proto3" json:"auction_floor,omitempty"`
	AuctionCeil                 float32 `protobuf:"fixed32,120,opt,name=auction_ceil,json=auctionCeil,proto3" json:"auction_ceil,omitempty"`
	IdtrafficSource             int32   `protobuf:"varint,121,opt,name=idtraffic_source,json=idtrafficSource,proto3" json:"idtraffic_source,omitempty"`
	FallbackPosition            int32   `protobuf:"varint,122,opt,name=fallback_position,json=fallbackPosition,proto3" json:"fallback_position,omitempty"`
	AdServingHost               string  `protobuf:"bytes,123,opt,name=ad_serving_host,json=adServingHost,proto3" json:"ad_serving_host,omitempty"`
	IdrtbErrorReason            int32   `protobuf:"varint,124,opt,name=idrtb_error_reason,json=idrtbErrorReason,proto3" json:"idrtb_error_reason,omitempty"`
	ClientHintsUsage            int32   `protobuf:"varint,125,opt,name=client_hints_usage,json=clientHintsUsage,proto3" json:"client_hints_usage,omitempty"`
	CustomValue_1               string  `protobuf:"bytes,126,opt,name=custom_value_1,json=customValue1,proto3" json:"custom_value_1,omitempty"`
	CustomValue_2               string  `protobuf:"bytes,127,opt,name=custom_value_2,json=customValue2,proto3" json:"custom_value_2,omitempty"`
	CustomValue_3               string  `protobuf:"bytes,128,opt,name=custom_value_3,json=customValue3,proto3" json:"custom_value_3,omitempty"`
}

func (x *AdEvent) Reset() {
	*x = AdEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_files_adevent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdEvent) ProtoMessage() {}

func (x *AdEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_files_adevent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdEvent.ProtoReflect.Descriptor instead.
func (*AdEvent) Descriptor() ([]byte, []int) {
	return file_proto_files_adevent_proto_rawDescGZIP(), []int{0}
}

func (x *AdEvent) GetDateInt() int64 {
	if x != nil {
		return x.DateInt
	}
	return 0
}

func (x *AdEvent) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AdEvent) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AdEvent) GetIdlanguage() int32 {
	if x != nil {
		return x.Idlanguage
	}
	return 0
}

func (x *AdEvent) GetSiteHostname() string {
	if x != nil {
		return x.SiteHostname
	}
	return ""
}

func (x *AdEvent) GetIdadvertiser() int32 {
	if x != nil {
		return x.Idadvertiser
	}
	return 0
}

func (x *AdEvent) GetIdpublisher() int32 {
	if x != nil {
		return x.Idpublisher
	}
	return 0
}

func (x *AdEvent) GetIdsite() int32 {
	if x != nil {
		return x.Idsite
	}
	return 0
}

func (x *AdEvent) GetIdzone() int32 {
	if x != nil {
		return x.Idzone
	}
	return 0
}

func (x *AdEvent) GetIdcategory() int32 {
	if x != nil {
		return x.Idcategory
	}
	return 0
}

func (x *AdEvent) GetIdcampaign() int32 {
	if x != nil {
		return x.Idcampaign
	}
	return 0
}

func (x *AdEvent) GetIdvariation() int32 {
	if x != nil {
		return x.Idvariation
	}
	return 0
}

func (x *AdEvent) GetIdos() int32 {
	if x != nil {
		return x.Idos
	}
	return 0
}

func (x *AdEvent) GetIdbrowser() int32 {
	if x != nil {
		return x.Idbrowser
	}
	return 0
}

func (x *AdEvent) GetIddevice() int32 {
	if x != nil {
		return x.Iddevice
	}
	return 0
}

func (x *AdEvent) GetIdcarrier() int32 {
	if x != nil {
		return x.Idcarrier
	}
	return 0
}

func (x *AdEvent) GetIdisp() int32 {
	if x != nil {
		return x.Idisp
	}
	return 0
}

func (x *AdEvent) GetSub() int32 {
	if x != nil {
		return x.Sub
	}
	return 0
}

func (x *AdEvent) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AdEvent) GetPublisherRate() int32 {
	if x != nil {
		return x.PublisherRate
	}
	return 0
}

func (x *AdEvent) GetPublisherCurrency() string {
	if x != nil {
		return x.PublisherCurrency
	}
	return ""
}

func (x *AdEvent) GetCampaignCurrency() string {
	if x != nil {
		return x.CampaignCurrency
	}
	return ""
}

func (x *AdEvent) GetExchangeToPublisher() float32 {
	if x != nil {
		return x.ExchangeToPublisher
	}
	return 0
}

func (x *AdEvent) GetExchangeToNetwork() float32 {
	if x != nil {
		return x.ExchangeToNetwork
	}
	return 0
}

func (x *AdEvent) GetAdType() int32 {
	if x != nil {
		return x.AdType
	}
	return 0
}

func (x *AdEvent) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *AdEvent) GetIdnetwork() int32 {
	if x != nil {
		return x.Idnetwork
	}
	return 0
}

func (x *AdEvent) GetImpressionStatus() int32 {
	if x != nil {
		return x.ImpressionStatus
	}
	return 0
}

func (x *AdEvent) GetImpressionInvalidReason() int32 {
	if x != nil {
		return x.ImpressionInvalidReason
	}
	return 0
}

func (x *AdEvent) GetAdblock() int32 {
	if x != nil {
		return x.Adblock
	}
	return 0
}

func (x *AdEvent) GetIdoffer() int32 {
	if x != nil {
		return x.Idoffer
	}
	return 0
}

func (x *AdEvent) GetIdlandingPage() int32 {
	if x != nil {
		return x.IdlandingPage
	}
	return 0
}

func (x *AdEvent) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AdEvent) GetRegionGeonameId() int32 {
	if x != nil {
		return x.RegionGeonameId
	}
	return 0
}

func (x *AdEvent) GetIdpartner() int32 {
	if x != nil {
		return x.Idpartner
	}
	return 0
}

func (x *AdEvent) GetClickStatus() int32 {
	if x != nil {
		return x.ClickStatus
	}
	return 0
}

func (x *AdEvent) GetClickInvalidReason() string {
	if x != nil {
		return x.ClickInvalidReason
	}
	return ""
}

func (x *AdEvent) GetClickAllInvalidReasons() int32 {
	if x != nil {
		return x.ClickAllInvalidReasons
	}
	return 0
}

func (x *AdEvent) GetIdgoal() string {
	if x != nil {
		return x.Idgoal
	}
	return ""
}

func (x *AdEvent) GetRtbTotalTime() int32 {
	if x != nil {
		return x.RtbTotalTime
	}
	return 0
}

func (x *AdEvent) GetRtbContentSize() float32 {
	if x != nil {
		return x.RtbContentSize
	}
	return 0
}

func (x *AdEvent) GetBidStatus() string {
	if x != nil {
		return x.BidStatus
	}
	return ""
}

func (x *AdEvent) GetErrorReason() string {
	if x != nil {
		return x.ErrorReason
	}
	return ""
}

func (x *AdEvent) GetRtbQueryStatus() bool {
	if x != nil {
		return x.RtbQueryStatus
	}
	return false
}

func (x *AdEvent) GetRtbValue() float32 {
	if x != nil {
		return x.RtbValue
	}
	return 0
}

func (x *AdEvent) GetRtbRequestType() int32 {
	if x != nil {
		return x.RtbRequestType
	}
	return 0
}

func (x *AdEvent) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *AdEvent) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

func (x *AdEvent) GetCountryOriginal() string {
	if x != nil {
		return x.CountryOriginal
	}
	return ""
}

func (x *AdEvent) GetHttpXForwardedFor() string {
	if x != nil {
		return x.HttpXForwardedFor
	}
	return ""
}

func (x *AdEvent) GetIdproductCategory() int32 {
	if x != nil {
		return x.IdproductCategory
	}
	return 0
}

func (x *AdEvent) GetPricingModel() int32 {
	if x != nil {
		return x.PricingModel
	}
	return 0
}

func (x *AdEvent) GetHttps() int32 {
	if x != nil {
		return x.Https
	}
	return 0
}

func (x *AdEvent) GetScreenResolution() string {
	if x != nil {
		return x.ScreenResolution
	}
	return ""
}

func (x *AdEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AdEvent) GetUrlHash() string {
	if x != nil {
		return x.UrlHash
	}
	return ""
}

func (x *AdEvent) GetRefererSiteHostname() string {
	if x != nil {
		return x.RefererSiteHostname
	}
	return ""
}

func (x *AdEvent) GetExecutionTime() float32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *AdEvent) GetVideoEvent() int32 {
	if x != nil {
		return x.VideoEvent
	}
	return 0
}

func (x *AdEvent) GetErrorcode() int32 {
	if x != nil {
		return x.Errorcode
	}
	return 0
}

func (x *AdEvent) GetImpId() string {
	if x != nil {
		return x.ImpId
	}
	return ""
}

func (x *AdEvent) GetBidId() string {
	if x != nil {
		return x.BidId
	}
	return ""
}

func (x *AdEvent) GetHttpCode() int32 {
	if x != nil {
		return x.HttpCode
	}
	return 0
}

func (x *AdEvent) GetIdcarrierSource() int32 {
	if x != nil {
		return x.IdcarrierSource
	}
	return 0
}

func (x *AdEvent) GetNoscript() int32 {
	if x != nil {
		return x.Noscript
	}
	return 0
}

func (x *AdEvent) GetIncognitoMode() int32 {
	if x != nil {
		return x.IncognitoMode
	}
	return 0
}

func (x *AdEvent) GetTestMode() int32 {
	if x != nil {
		return x.TestMode
	}
	return 0
}

func (x *AdEvent) GetCityGeonameId() int32 {
	if x != nil {
		return x.CityGeonameId
	}
	return 0
}

func (x *AdEvent) GetIsTrustedProxy() int32 {
	if x != nil {
		return x.IsTrustedProxy
	}
	return 0
}

func (x *AdEvent) GetIddatacenter() int32 {
	if x != nil {
		return x.Iddatacenter
	}
	return 0
}

func (x *AdEvent) GetAdblockVer() string {
	if x != nil {
		return x.AdblockVer
	}
	return ""
}

func (x *AdEvent) GetClickx() int32 {
	if x != nil {
		return x.Clickx
	}
	return 0
}

func (x *AdEvent) GetClicky() int32 {
	if x != nil {
		return x.Clicky
	}
	return 0
}

func (x *AdEvent) GetContainerResolution() string {
	if x != nil {
		return x.ContainerResolution
	}
	return ""
}

func (x *AdEvent) GetImpressionAllInvalidReasons() int32 {
	if x != nil {
		return x.ImpressionAllInvalidReasons
	}
	return 0
}

func (x *AdEvent) GetNetacuityProxyDescription() string {
	if x != nil {
		return x.NetacuityProxyDescription
	}
	return ""
}

func (x *AdEvent) GetNetacuityProxyType() string {
	if x != nil {
		return x.NetacuityProxyType
	}
	return ""
}

func (x *AdEvent) GetEurToUsd() float32 {
	if x != nil {
		return x.EurToUsd
	}
	return 0
}

func (x *AdEvent) GetWpnEvent() int32 {
	if x != nil {
		return x.WpnEvent
	}
	return 0
}

func (x *AdEvent) GetEmailStatus() int32 {
	if x != nil {
		return x.EmailStatus
	}
	return 0
}

func (x *AdEvent) GetSub2() int32 {
	if x != nil {
		return x.Sub2
	}
	return 0
}

func (x *AdEvent) GetSub3() int32 {
	if x != nil {
		return x.Sub3
	}
	return 0
}

func (x *AdEvent) GetScriptType() string {
	if x != nil {
		return x.ScriptType
	}
	return ""
}

func (x *AdEvent) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *AdEvent) GetScriptVer() string {
	if x != nil {
		return x.ScriptVer
	}
	return ""
}

func (x *AdEvent) GetBrowserVer() int32 {
	if x != nil {
		return x.BrowserVer
	}
	return 0
}

func (x *AdEvent) GetVr() int32 {
	if x != nil {
		return x.Vr
	}
	return 0
}

func (x *AdEvent) GetInternal() int32 {
	if x != nil {
		return x.Internal
	}
	return 0
}

func (x *AdEvent) GetSampling() int32 {
	if x != nil {
		return x.Sampling
	}
	return 0
}

func (x *AdEvent) GetNoFunds() int32 {
	if x != nil {
		return x.NoFunds
	}
	return 0
}

func (x *AdEvent) GetIdresponsiveLayout() int32 {
	if x != nil {
		return x.IdresponsiveLayout
	}
	return 0
}

func (x *AdEvent) GetIdmultizone() int32 {
	if x != nil {
		return x.Idmultizone
	}
	return 0
}

func (x *AdEvent) GetEmailIsp() int32 {
	if x != nil {
		return x.EmailIsp
	}
	return 0
}

func (x *AdEvent) GetScriptDetail() int32 {
	if x != nil {
		return x.ScriptDetail
	}
	return 0
}

func (x *AdEvent) GetScriptVersion() int32 {
	if x != nil {
		return x.ScriptVersion
	}
	return 0
}

func (x *AdEvent) GetConversionValueEur() float32 {
	if x != nil {
		return x.ConversionValueEur
	}
	return 0
}

func (x *AdEvent) GetConversionValueUsd() float32 {
	if x != nil {
		return x.ConversionValueUsd
	}
	return 0
}

func (x *AdEvent) GetIdadvertiserAdType() int32 {
	if x != nil {
		return x.IdadvertiserAdType
	}
	return 0
}

func (x *AdEvent) GetIdproxy() int32 {
	if x != nil {
		return x.Idproxy
	}
	return 0
}

func (x *AdEvent) GetAdRequestResult() int32 {
	if x != nil {
		return x.AdRequestResult
	}
	return 0
}

func (x *AdEvent) GetIdnetworkType() int32 {
	if x != nil {
		return x.IdnetworkType
	}
	return 0
}

func (x *AdEvent) GetRtbInventoryId() string {
	if x != nil {
		return x.RtbInventoryId
	}
	return ""
}

func (x *AdEvent) GetRtbInventoryName() string {
	if x != nil {
		return x.RtbInventoryName
	}
	return ""
}

func (x *AdEvent) GetIdcampaignType() int32 {
	if x != nil {
		return x.IdcampaignType
	}
	return 0
}

func (x *AdEvent) GetRefreshIteration() int32 {
	if x != nil {
		return x.RefreshIteration
	}
	return 0
}

func (x *AdEvent) GetKeyValue_1() int32 {
	if x != nil {
		return x.KeyValue_1
	}
	return 0
}

func (x *AdEvent) GetKeyValue_2() int32 {
	if x != nil {
		return x.KeyValue_2
	}
	return 0
}

func (x *AdEvent) GetKeyValue_3() int32 {
	if x != nil {
		return x.KeyValue_3
	}
	return 0
}

func (x *AdEvent) GetKeyValue_4() int32 {
	if x != nil {
		return x.KeyValue_4
	}
	return 0
}

func (x *AdEvent) GetKeyValue_5() int32 {
	if x != nil {
		return x.KeyValue_5
	}
	return 0
}

func (x *AdEvent) GetKeyValue_6() int32 {
	if x != nil {
		return x.KeyValue_6
	}
	return 0
}

func (x *AdEvent) GetKeyValue_7() int32 {
	if x != nil {
		return x.KeyValue_7
	}
	return 0
}

func (x *AdEvent) GetKeyValue_8() int32 {
	if x != nil {
		return x.KeyValue_8
	}
	return 0
}

func (x *AdEvent) GetKeyValue_9() int32 {
	if x != nil {
		return x.KeyValue_9
	}
	return 0
}

func (x *AdEvent) GetKeyValue_10() int32 {
	if x != nil {
		return x.KeyValue_10
	}
	return 0
}

func (x *AdEvent) GetCdnUsage() int32 {
	if x != nil {
		return x.CdnUsage
	}
	return 0
}

func (x *AdEvent) GetBidShadingValue() float32 {
	if x != nil {
		return x.BidShadingValue
	}
	return 0
}

func (x *AdEvent) GetSecondBestValue() float32 {
	if x != nil {
		return x.SecondBestValue
	}
	return 0
}

func (x *AdEvent) GetAuctionFloor() float32 {
	if x != nil {
		return x.AuctionFloor
	}
	return 0
}

func (x *AdEvent) GetAuctionCeil() float32 {
	if x != nil {
		return x.AuctionCeil
	}
	return 0
}

func (x *AdEvent) GetIdtrafficSource() int32 {
	if x != nil {
		return x.IdtrafficSource
	}
	return 0
}

func (x *AdEvent) GetFallbackPosition() int32 {
	if x != nil {
		return x.FallbackPosition
	}
	return 0
}

func (x *AdEvent) GetAdServingHost() string {
	if x != nil {
		return x.AdServingHost
	}
	return ""
}

func (x *AdEvent) GetIdrtbErrorReason() int32 {
	if x != nil {
		return x.IdrtbErrorReason
	}
	return 0
}

func (x *AdEvent) GetClientHintsUsage() int32 {
	if x != nil {
		return x.ClientHintsUsage
	}
	return 0
}

func (x *AdEvent) GetCustomValue_1() string {
	if x != nil {
		return x.CustomValue_1
	}
	return ""
}

func (x *AdEvent) GetCustomValue_2() string {
	if x != nil {
		return x.CustomValue_2
	}
	return ""
}

func (x *AdEvent) GetCustomValue_3() string {
	if x != nil {
		return x.CustomValue_3
	}
	return ""
}

var File_proto_files_adevent_proto protoreflect.FileDescriptor

var file_proto_files_adevent_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x64,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x78, 0x61,
	0x64, 0x73, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xca, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x64, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x64, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x64, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x69, 0x64, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x64, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x64, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x64, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x69, 0x73, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x64, 0x69, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x64, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x19, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x64, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x64, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x64, 0x6c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x64, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x64, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x64, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x67, 0x6f, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x74, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x74,
	0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x74,
	0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x74, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x62, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x72, 0x74, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x74, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x74, 0x62, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x74, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x58, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x69,
	0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x72, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x72, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x53, 0x69,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x64, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x64, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x6f, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x64, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x64, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x64, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x78, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x79, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x31, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x6e, 0x65, 0x74, 0x61, 0x63, 0x75, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x61,
	0x63, 0x75, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x61, 0x63, 0x75, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x61, 0x63, 0x75, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x75, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x75, 0x72,
	0x54, 0x6f, 0x55, 0x73, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x70, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x32, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x75, 0x62, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x62,
	0x33, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x75, 0x62, 0x33, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x55, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x56, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x76, 0x72, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x76, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x6f, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x64, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x69, 0x64, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x64, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x73, 0x70, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49,
	0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x65, 0x75, 0x72, 0x18, 0x60, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x75, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x73, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x69, 0x64, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x64, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x62, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x74, 0x62,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x74, 0x62, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x74, 0x62, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x31, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x32, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x33, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x34, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x35, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x35, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x36, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x36, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x37, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x37, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x38, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x38, 0x12,
	0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x39, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x39, 0x12,
	0x20, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x31, 0x30, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x30, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x64, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x64, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x64, 0x53, 0x68,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x77, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x69, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x64, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x64, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x64, 0x72, 0x74, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x64, 0x72, 0x74,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x31, 0x18, 0x7e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x32, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x33, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x2a, 0x81, 0x01,
	0x0a, 0x0b, 0x41, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x6f, 0x61,
	0x6c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x65, 0x77,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x69, 0x74, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x74, 0x62, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x70, 0x6e,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x08, 0x42, 0x46, 0x5a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0xca, 0x02, 0x1a, 0x45, 0x78, 0x61, 0x64, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0xe2, 0x02,
	0x18, 0x45, 0x78, 0x61, 0x64, 0x73, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_files_adevent_proto_rawDescOnce sync.Once
	file_proto_files_adevent_proto_rawDescData = file_proto_files_adevent_proto_rawDesc
)

func file_proto_files_adevent_proto_rawDescGZIP() []byte {
	file_proto_files_adevent_proto_rawDescOnce.Do(func() {
		file_proto_files_adevent_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_files_adevent_proto_rawDescData)
	})
	return file_proto_files_adevent_proto_rawDescData
}

var file_proto_files_adevent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_files_adevent_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_files_adevent_proto_goTypes = []any{
	(AdEventType)(0), // 0: exads.schema.events.AdEventType
	(*AdEvent)(nil),  // 1: exads.schema.events.AdEvent
}
var file_proto_files_adevent_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_files_adevent_proto_init() }
func file_proto_files_adevent_proto_init() {
	if File_proto_files_adevent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_files_adevent_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AdEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_files_adevent_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_files_adevent_proto_goTypes,
		DependencyIndexes: file_proto_files_adevent_proto_depIdxs,
		EnumInfos:         file_proto_files_adevent_proto_enumTypes,
		MessageInfos:      file_proto_files_adevent_proto_msgTypes,
	}.Build()
	File_proto_files_adevent_proto = out.File
	file_proto_files_adevent_proto_rawDesc = nil
	file_proto_files_adevent_proto_goTypes = nil
	file_proto_files_adevent_proto_depIdxs = nil
}
