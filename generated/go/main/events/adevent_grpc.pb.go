// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: adevent.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventLog_Send_FullMethodName       = "/exads.schema.events.EventLog/Send"
	EventLog_SendEvents_FullMethodName = "/exads.schema.events.EventLog/SendEvents"
)

// EventLogClient is the client API for EventLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventLogClient interface {
	Send(ctx context.Context, in *AdEventRequest, opts ...grpc.CallOption) (*AdEventResponse, error)
	SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventLog_SendEventsClient, error)
}

type eventLogClient struct {
	cc grpc.ClientConnInterface
}

func NewEventLogClient(cc grpc.ClientConnInterface) EventLogClient {
	return &eventLogClient{cc}
}

func (c *eventLogClient) Send(ctx context.Context, in *AdEventRequest, opts ...grpc.CallOption) (*AdEventResponse, error) {
	out := new(AdEventResponse)
	err := c.cc.Invoke(ctx, EventLog_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLogClient) SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventLog_SendEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventLog_ServiceDesc.Streams[0], EventLog_SendEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventLogSendEventsClient{stream}
	return x, nil
}

type EventLog_SendEventsClient interface {
	Send(*AdEventRequest) error
	CloseAndRecv() (*AdEventResponse, error)
	grpc.ClientStream
}

type eventLogSendEventsClient struct {
	grpc.ClientStream
}

func (x *eventLogSendEventsClient) Send(m *AdEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventLogSendEventsClient) CloseAndRecv() (*AdEventResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AdEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventLogServer is the server API for EventLog service.
// All implementations must embed UnimplementedEventLogServer
// for forward compatibility
type EventLogServer interface {
	Send(context.Context, *AdEventRequest) (*AdEventResponse, error)
	SendEvents(EventLog_SendEventsServer) error
	mustEmbedUnimplementedEventLogServer()
}

// UnimplementedEventLogServer must be embedded to have forward compatible implementations.
type UnimplementedEventLogServer struct {
}

func (UnimplementedEventLogServer) Send(context.Context, *AdEventRequest) (*AdEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedEventLogServer) SendEvents(EventLog_SendEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEvents not implemented")
}
func (UnimplementedEventLogServer) mustEmbedUnimplementedEventLogServer() {}

// UnsafeEventLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventLogServer will
// result in compilation errors.
type UnsafeEventLogServer interface {
	mustEmbedUnimplementedEventLogServer()
}

func RegisterEventLogServer(s grpc.ServiceRegistrar, srv EventLogServer) {
	s.RegisterService(&EventLog_ServiceDesc, srv)
}

func _EventLog_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLogServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventLog_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLogServer).Send(ctx, req.(*AdEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLog_SendEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventLogServer).SendEvents(&eventLogSendEventsServer{stream})
}

type EventLog_SendEventsServer interface {
	SendAndClose(*AdEventResponse) error
	Recv() (*AdEventRequest, error)
	grpc.ServerStream
}

type eventLogSendEventsServer struct {
	grpc.ServerStream
}

func (x *eventLogSendEventsServer) SendAndClose(m *AdEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventLogSendEventsServer) Recv() (*AdEventRequest, error) {
	m := new(AdEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventLog_ServiceDesc is the grpc.ServiceDesc for EventLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exads.schema.events.EventLog",
	HandlerType: (*EventLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _EventLog_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvents",
			Handler:       _EventLog_SendEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "adevent.proto",
}
